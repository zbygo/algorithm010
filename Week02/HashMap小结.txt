1.HashMap是Map的一种实现
2.默认参数 
	哈希因子：0.75
	默认容量：16
	最大容量：2的30次幂
	变为红黑树结构的临界值 8 且总值大于64
	退化为链表的节点值为6  
3.数据结构：数组+单向链表+红黑树
3.方法
get方法:
	1.计算key值的hash 然后异或hash值位运算右移三位
	2.使用第一步计算出的hash值 与长度与 得到key放置的 索引
	3.每次判断一下是否该索引下的第一个节点的key是否相等 如果等则返回
	4.如果在第三步没有找到，则需要遍历查找
	  4.1如果为红黑树则通过find方法查找返回
	  4.2如果为单链表则不断的判断next的key
put
	1.计算key的hash值确定存放位置的index
	2.如果该index为null直接newNode放入
	3.如果不为空 则找到节点或者新建节点
		3.1判断第一个节点的key是否相等 
		3.2如果节点树节点 则调用putTreeVal方法插入节点
		3.3其他情况则是不断循环判断节点是否等于key值，一致到next为null则新插入一个节点（尾插）
	4.如果找到节点则赋值
	5.操作次数+1
	6.如果总量大于容量*哈希因子则需要扩容
	7.扩容
		7.1计算扩容量：原容量*2
		7.2需要循环每个index的节点
		7.3如果该index只有一个节点则直接放入新的index
		7.4如果为TreeNode调用spilt方法；初始化两棵树 分别存储新的index存放的值如果最后判断是否小于等于6退化为链表